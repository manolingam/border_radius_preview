{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTopLeftChange","event","target","value","setState","top_left","onTopRightChange","top_right","onBottomLeftChange","bottom_left","onBottomRightChange","bottom_right","state","not_null","val","react_default","a","createElement","className","style","borderRadius","concat","id","rows","cols","onChange","type","maxLength","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwEeA,qBApEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,gBAAkB,SAACC,GACdA,EAAMC,OAAOC,MACdV,EAAKW,SAAS,CAACC,SAAUJ,EAAMC,OAAOC,MAAQ,OAE9CV,EAAKW,SAAS,CAACC,SAAUJ,EAAMC,OAAOC,SAf5BV,EAmBda,iBAAmB,SAACL,GACfA,EAAMC,OAAOC,MACdV,EAAKW,SAAS,CAACG,UAAWN,EAAMC,OAAOC,MAAQ,OAE/CV,EAAKW,SAAS,CAACG,UAAWN,EAAMC,OAAOC,SAvB7BV,EA2Bde,mBAAqB,SAACP,GACjBA,EAAMC,OAAOC,MACdV,EAAKW,SAAS,CAACK,YAAaR,EAAMC,OAAOC,MAAQ,OAEjDV,EAAKW,SAAS,CAACK,YAAaR,EAAMC,OAAOC,SA/B/BV,EAmCdiB,oBAAsB,SAACT,GAClBA,EAAMC,OAAOC,MACdV,EAAKW,SAAS,CAACO,aAAcV,EAAMC,OAAOC,MAAQ,OAElDV,EAAKW,SAAS,CAACO,aAAcV,EAAMC,OAAOC,SArC5CV,EAAKmB,MAAQ,CACXP,SAAS,GACTE,UAAU,GACVE,YAAY,GACZE,aAAa,GACbE,SAAS,GAPCpB,wEA6CZ,IAAIqB,EAAM,kBAAoBlB,KAAKgB,MAAMP,SAAW,IAAMT,KAAKgB,MAAML,UAAY,IAAMX,KAAKgB,MAAMD,aAAe,IAAMf,KAAKgB,MAAMH,YAElI,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAACC,aAAY,GAAAC,OAAKzB,KAAKgB,MAAMP,SAAhB,KAAAgB,OAA4BzB,KAAKgB,MAAML,UAAvC,KAAAc,OAAoDzB,KAAKgB,MAAMD,aAA/D,KAAAU,OAA+EzB,KAAKgB,MAAMH,YAA1F,MACpBa,GAAG,MAAMC,KAAK,IAAIC,KAAK,MACtBV,GACGC,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,SAAOQ,SAAU7B,KAAKI,gBAAiB0B,KAAK,OAAOJ,GAAG,WAAWK,UAAU,IAAIC,YAAY,WAC3Fb,EAAAC,EAAAC,cAAA,SAAOQ,SAAU7B,KAAKU,iBAAkBoB,KAAK,OAAOJ,GAAG,YAAYK,UAAU,IAAIC,YAAY,YAAkBb,EAAAC,EAAAC,cAAA,WAC/GF,EAAAC,EAAAC,cAAA,SAAOQ,SAAU7B,KAAKY,mBAAoBkB,KAAK,OAAOJ,GAAG,cAAcK,UAAU,IAAIC,YAAY,WACjGb,EAAAC,EAAAC,cAAA,SAAOQ,SAAU7B,KAAKc,oBAAqBgB,KAAK,OAAOJ,GAAG,eAAeK,UAAU,IAAIC,YAAY,aAErGb,EAAAC,EAAAC,cAAA,kDA/DUY,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5beac04c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      top_left:'',\r\n      top_right:'',\r\n      bottom_left:'',\r\n      bottom_right:'',\r\n      not_null:0\r\n    };\r\n  }\r\n\r\n  onTopLeftChange = (event) => {\r\n    if(event.target.value){\r\n      this.setState({top_left: event.target.value + 'px'})\r\n    } else {\r\n      this.setState({top_left: event.target.value})\r\n    }\r\n  }\r\n\r\n  onTopRightChange = (event) => {\r\n    if(event.target.value){\r\n      this.setState({top_right: event.target.value + 'px'})\r\n    } else {\r\n      this.setState({top_right: event.target.value})\r\n    }\r\n  }\r\n\r\n  onBottomLeftChange = (event) => {\r\n    if(event.target.value){\r\n      this.setState({bottom_left: event.target.value + 'px'})\r\n    } else {\r\n      this.setState({bottom_left: event.target.value})\r\n    }\r\n  }\r\n\r\n  onBottomRightChange = (event) => {\r\n    if(event.target.value){\r\n      this.setState({bottom_right: event.target.value + 'px'})\r\n    } else {\r\n      this.setState({bottom_right: event.target.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n \r\n    let val = 'border-radius: ' + this.state.top_left + ' ' + this.state.top_right + ' ' + this.state.bottom_right + ' ' + this.state.bottom_left;\r\n\r\n    return(\r\n      <div className=\"main\">\r\n        <header>Border Radius Preview</header>\r\n        <div \r\n          style={{borderRadius: `${this.state.top_left} ${this.state.top_right} ${this.state.bottom_right} ${this.state.bottom_left} `}} \r\n          id=\"box\" rows=\"3\" cols=\"50\">\r\n          {val}\r\n        </div><br></br>\r\n        <div className=\"values\">\r\n          <p>-- Enter Radius Values --</p>\r\n          <input onChange={this.onTopLeftChange} type=\"text\" id='top-left' maxLength='4' placeholder=\"T-Left\"></input>\r\n          <input onChange={this.onTopRightChange} type=\"text\" id='top-right' maxLength='4' placeholder=\"T-Right\"></input><br></br>\r\n          <input onChange={this.onBottomLeftChange} type=\"text\" id='bottom-left' maxLength='4' placeholder=\"B-Left\"></input>\r\n          <input onChange={this.onBottomRightChange} type=\"text\" id='bottom-right' maxLength='4' placeholder=\"B-Right\"></input>\r\n        </div>\r\n        <footer>Made with &hearts; by Mano</footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}